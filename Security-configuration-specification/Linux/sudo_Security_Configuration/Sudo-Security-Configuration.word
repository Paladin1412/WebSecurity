1	 Sudo介绍
		1.1	Sudo简介
		sudo是Linux系统管理命令，是允许系统管理员让普通用户执行某些特权命令的工具。在sudo出现之前，普通用户通过su命令切换到特权用户来管理系统，但是在使用su命令时，普通用户必须输入特权用户的口令才能切换到特权用户，因此，必须预先告知普通用户该特权用户的口令，因为普通用户切换到特权用户后的权限是无限制的，所以系统的安全性会受到威胁。sudo的出现解决了这个问题，sudo让普通用户不需要知道特权用户的口令即可获得特权，在此之前，超级用户可将普通用户的用户名、可执行的特定命令、运行身份等信息，配置在文件中（通常是/etc/sudoers），即完成对普通用户的授权（此时该用户称为“sudoer”）。之后普通用户就可以在命令前加上“sudo”，以特权权限执行该命令。
		1.2	应用场景
		本文档为SuSe(10/11)  Linux操作系统上sudo环境安全配置指导文档，旨在指导产品在配置sudo时如何配置安全的sudo用户和sudo命令，以达到系统的安全。本配置指导书适用场景：
		1、	业务用户在未知特权用户口令情况下，基于业务需要，必须执行该特权用户权限范围内的一些操作。
		2、	基于业务场景需要，实现自动化脚本时业务用户需要自动化执行一些特权操作。
		1.3	Sudo命令使用方法
		语法：
		sudo [-bhHpV][-s <shell>][-u username|#uid][Command] 或 sudo [-klv]

		表1：sudo命令参数介绍
		-V	显示版本编号
		-h	显示版本编号及指令的使用方式说明
		-l	显示出自己（执行 sudo 的使用者）的权限
		-v	延长密码有效期，如果当前密码有效期没到则不需要输入密码，否则需要再次输入密码
		-k	结束密码的有效期限，也就是下次再执行sudo时便需要输入密码
		-b	在后台执行命令
		-p	设置询问密码的提示语，可使用%u显示使用者的帐号名称，%h显示主机名称，如sudo –p “please %u input passwd for %h:”
		-u	指定username或#uid，表示想要切换到的用户。如果不加此参数，默认切换到 root
		-s	执行指定的shell
		-H	将HOME环境变量设为新身份的HOME环境变量
		Command	要执行的指令
2	主要问题
		2.1	sudoer配置文件直接配置了高风险系统命令
		某产品的在/etc/sudoers配置了普通用户gandalf可执行/usr/bin/scp。gandalf为普通用户，但是该用户可以创建文件passwd，然后使用sudo scp将文件考至/etc目录下替换掉原passwd文件，这样就相当于重置了root帐号密码，这样就可以直接su到root，从而获取了root权限，执行任意命令，达到了提升权限的目的。
		2.2	属于低权限用户的脚本或程序不能以高权限帐号运行
		某产品采用普通帐号omu来运行程序，但是程序需要执行一个脚本****.sh，脚本中包含了只有root帐号才能执行的命令，于是在/etc/sudoers里面的****.sh，但是脚本的属主是运行程序的普通用户omu，omu用户可以对该文件进行修改操作，所以omu用户登陆后可以通过修改该脚本文件，在其中插入任意root帐号才能执行的命令，通过命令sudo ****.sh就可以实现任提升权限的目的。
3	Sudo安全配置
	3.1	配置示例
	1)	以root用户身份登录服务器，执行如下命令打开sudo配置文件/etc/sudoers:
	#visudo
	2)	找到“#User  privilege  specification”这个注释，在其下面就可以添加自定义配置。示例如下：

	上图中三条配置释义如下：
	a)	root 	ALL=(ALL)	ALL
	这条配置表明用户root可以通过sudo切换到任何用户执行任意命令。
	b)	wang	ALL=(ALL)	NOPASSWD:/usr/bin/find
	这条配置表明用户wang在不用输入目标用户口令的情况下通过sudo切换到任何用户执行find命令。NOPASSWD指明不需要输入目标用户的口令，/usr/bin/find指明用户wang只能通过sudo执行find命令，不能通过sudo执行cat、ls等其他命令。
	c)	LJ		ALL=(root)	NOPASSWD:/bin/ls，/bin/cat，/usr/bin/vi  /fjl/aaa，/bin/cp  *  /fjl/，/bin/mount  *  /fjl/，PASSWD:/bin/chmod
	这条配置表明用户LJ通过sudo只能切换到root账号去执行后面的命令。在执行NOPASSWD后面的命令时不需要输入root账号口令，而执行在PASSWD后面的chmod命令时需要输入root账号的密码。其中，/usr/bin/vi  /fjl/aaa这条命令表明用户LJ通过sudo执行vi命令时只能编辑/fjl/aaa这个文件；/bin/cp  *  /fjl/表明用户LJ通过sudo执行cp命令时只能往/fjl/目录下复制文件；/bin/mount  *  /fjl/表明用户LJ通过sudo执行mount命令时只能将设备挂载到/fjl/这个目录下。

3.2	命令分类
配置sudo后的风险	命令	说明	能否配置sudo权限
低	ls、dir、pwd、id、ps、du、df、who、w、whoami、file、finger、cal、dmidecode、find、wc、stat、ipcs	这些显示查看信息类的命令不会对系统或特殊文件造成影响，这类命令相对较安全	可以配置
	zip	压缩类命令不会对系统或特殊文件造成影响	可以配置
	mkdir、rmdir、touch	不会对系统或特殊文件造成影响	可以配置
	……
中	cat、view、more、less、head、tail、awk	配置后普通用户能够查看系统内所有文件(包括特殊文件，如/etc/shadow)的内容，可能造成敏感信息泄露	限制访问范围
	grep、egrep、fgrep	配置后普通用户能够查看系统内所有文件(包括特殊文件，如/etc/shadow)的内容，可能造成敏感信息泄露	禁止
	stty	stty命令用于显示和修改终端行设置，配置后恶意用户任意修改系统终端行配置，影响系统正常使用	限制访问范围
	/etc/init.d/*
/usr/sbin/rc*	服务管理类命令，配置后可导致系统安全服务被恶意关闭，如syslog、auditd等，可将命令参数配全，如/etc/init.d/syslog restart	限制访问范围
	……
高	rm、vi、sed、dos2unix	配置后可能造成系统特殊文件被恶意删除或修改	限制访问范围
	cp、mv、gzip、unzip、gunzip、tar	配置后可能造成系统特殊文件被恶意替换	限制访问范围
	killall、pkill、chkconfig	配置后可能影响系统或服务的正常运行	限制访问范围
	mount、rpm	配置后可能引入恶意程序	限制访问范围
	unmount、fdisk	配置后可能影响系统的正常使用	限制访问范围
	su、sudo	配置后普通用户可以通过su命令切换到root执行任何命令	禁止
	chmod、chown、chgrp	配置后普通用户可以修改任何文件的权限	禁止
	useradd、userdel、groupadd、groupdel	配置后可能引入特权用户	禁止
	kill、shutdown、init、reboot、halt、poweroff	配置后可能影响系统或服务的正常运行	禁止
	passwd	配置后可能造成root口令被恶意修改	禁止
	mkfs	配置后可能造成系统磁盘被恶意格式化	禁止
	ifconfig、ethtool、route	网络接口/路由配置类的命令，配置后系统网络可能被恶意修改，影响正常流量（如网络不通）	禁止
	sh、bash、ksh、csh	Shell类程序配置后，普通用户可以用以目标用户权限执行系统任意命令	禁止
	crontab	配置后可为任意用户创建定时任务，可能导致root执行恶意程序	禁止
	sysctl	配置后可任意修改系统内核参数，系统安全功能可能被恶意关闭	禁止
	……

3.3	限制访问范围
		cat、view类命令
	1)	若sudo配置中存在cat、view等查看类命令，则必须限制cat、view这些命令可查看的文件范围。要求该范围内查看文件不会产生安全威胁。例如，下面示例配置仅允许用户tom通过sudo切换到root查看/etc/xxx.conf文件：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/cat	/etc/xxx.conf，/usr/bin/view	/etc/xxx.conf
	2)	不恰当的配置将会使普通用户能够查看系统内所有文件(包括特殊文件，如/etc/shadow)的内容，可能造成敏感信息泄露。例如，下面示例中用户tom可以通过sudo切换到root账户查看/etc/passwd和/etc/shadow等特殊文件。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/cat，/usr/bin/view
	查看/etc/passwd文件内容命令：
	> sudo  cat  /etc/passwd
	查看/etc/shadow文件内容命令：
	> sudo  cat  /etc/shadow
		cp类命令
	1)	若sudo配置中存在cp命令，则必须限制cp命令访问范围，约束目标目录。要求该范围内替换文件不会产生安全威胁。例如，下面示例配置仅允许用户tom往/dir1/和/dir2/dir3/目录下复制文件：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/cp  *  /dir1/，/bin/cp  *  /dir2/dir3/
	2)	不恰当的配置将会使系统特殊文件被更改，进而威胁整个系统。例如，下面示例中若用户tom通过sudo切换到root账号执行cp命令时没有限制，则用户tom可以复制系统内的任何文件，也可以向任何目录下复制文件。如果用户tom在/attack目录下伪造一个passwd文件，通过一条命令即可将系统的passwd文件替换为伪造的passwd文件，可能造成正常用户无法登陆系统或口令被恶意用户修改。其他文件如/etc/shadow、/etc/group等文件也是如此：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/cp
	文件替换命令：
	> sudo  cp  /attack/passwd  /etc/
		rm、vi
	1)	若sudo配置中存在rm、vi命令，则必须限制rm、vi命令的访问范围，限制允许删除或修改的文件范围。要求该范围内删除、编辑文件不会产生安全威胁。例如，下面示例仅允许用户tom删除或编辑/etc/xxx.conf文件：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/rm  /etc/xxx.conf，/bin/vi  /etc/xxx.conf
	2)	不恰当的配置将会使系统特殊文件被删除或修改，对系统造成威胁。例如，下面示例中用户tom通过sudo切换到root账号执行rm、vi命令时没有限制，则用户tom可以删除或修改系统内的任意文件。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/rm，/bin/vi
	删除/etc/shadow文件命令：
	> sudo	rm 	/etc/shadow
	修改/etc/passwd文件命令：
	> sudo	vi	/etc/passwd
		killall、pkill
	1)	若sudo配置中存在killall、pkill命令，则必须限制killall、pkill命令的访问范围，限制允许终止进程的范围。要求该范围内终止进程不会产生安全威胁。例如，下面示例仅允许用户tom终止属于自己的进程和关闭httpd进程：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/usr/bin/killall  –u  tom，/usr/bin/pkill  httpd
	2)	不恰当的配置将会影响系统的运行和服务的正常使用。例如，下面示例中用户tom通过sudo切换到root账号执行killall、pkill命令时没有限制，则用户tom可以杀掉系统内的任意进程。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/usr/bin/killall，/usr/bin/pkill
	终止用户root的所有进程命令：
	> sudo	killall	-u	root
	终止所有的bash进程命令：
	> sudo	pkill		bash
		mount
	1)	若sudo配置中存在mount命令，则必须限制mount命令挂载时挂载点的范围。要求该范围内挂载设备不会产生安全威胁。例如，下面示例仅允许用户tom往/aaa/bbb目录下挂载设备：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/mount	*	/aaa/bbb
	2)	不恰当的配置将会影响系统或程序正常使用，也可能引入恶意程序。例如，下面示例中用户tom通过sudo切换到root账号执行mount命令时没有限制，则用户tom可以向任意目录下挂载设备。使用mount命令进行挂载时，挂载点通常是空目录，但当挂载点不是空目录时，则挂载后该目录下的原有内容不可见，在卸载之后才可见。例如恶意用户可以将设备挂载到/bin目录，而在该设备中含有恶意程序，可以将恶意程序命名为ls，这样就会替换原有的/bin/ls程序。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/mount
	向/bin目录下挂载U盘设备(/dev/sdd1)命令：
	> sudo	mount	-t  vfat	/dev/sdd1		/bin
		umount
	1)	若sudo配置中存在unmount命令，则必须限制unmount命令卸载的范围。要求该范围内卸载设备不会产生安全威胁。例如，下面示例仅允许用户tom卸载挂载在/aaa/bbb目录下的设备：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/unmount	 /aaa/bbb
	2)	不恰当的配置将会影响系统或程序正常使用，可能造成设备被恶意用户随意卸载。例如，下面示例中用户tom通过sudo切换到root账号执行unmount命令时没有限制，则用户tom可以卸载挂载在任意目录下的设备（包括挂载在根目录下的设备）。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/unmount
	卸载挂载在根目录/下的设备命令：
	> sudo	unmount	 /
		其他需要限制的命令
	mv：限制源和目标
	tar：用-C选项指定目的目录
	fdisk：限制只能用-l选项查看磁盘分区信息
	rpm：限制其只具有查询功能或只能安装特定的安装包
	chkconfig：限制可控制服务的范围
…
3.4	不能配置sudo权限的命令
		su、sudo
	su、sudo命令可以使普通用户切换到其他用户（默认切换到root）去执行命令，一旦为su、sudo配置sudo权限，则普通用户sudo su和sudo sudo这样的连环命令切换到其他用户去执行该用户可执行的所有命令。因此要求禁止配置su、sudo命令的sudo权限。例如，下面示例用户tom可以通过sudo执行su和sudo命令切换到root账号执行passwd命令修改root的口令，用户tom除了可以执行passwd命令外还可以执行系统内的所有命令。
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/su，/usr/bin/sudo
	切换到root账号命令：
	> sudo	su
	修改root口令命令：
	# passwd
	编辑/etc/shadow文件命令：
	# vi  /etc.shadow
	直接修改root口令命令：
	> sudo  sudo  passwd
		备注：如果必须为su、sudo配置sudo权限则必须按照如下方式配置
		tom  ALL=(Runas)  NOPASSWD:/bin/su，/usr/bin/sudo
		其中Runas必须满足: 	1)不能为UID为0的用户（如root）；
	2)不能为GID为0的组（如%root）。
		chmod、chown、chgrp
	chmod、chown和chgrp这三个命令分别可以修改文件的权限、所有者和所属群组，一旦配置sudo权限，则系统内的特殊文件（如/etc/passwd）将受到威胁。因此要求禁止配置这些命令的sudo权限。例如，下面示例用户tom通过sudo切换到root账号执行chmod命令修改/etc/passwd文件的权限，让所有用户对/etc/passwd文件都有可写权限。之后任意用户就可以使用vi等编辑命令修改/etc/passwd文件，这会造成其他用户甚至root账号的密码被修改：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/bin/chmod
	修改/etc/passwd文件的权限命令：
	> sudo	chmod	777	 /etc/passwd
	修改/etc/passwd文件的内容命令：
	> vi	 /etc/passwd
		passwd
	passwd这个命令可以修改用户口令，一旦配置sudo权限，则系统内所有用户的口令将受到威胁。因此要求禁止配置该命令的sudo权限。例如，下面示例用户tom通过sudo切换到root账号执行passwd命令修改root用户的口令，会导致root用户无法正常登录系统：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD:/usr/bin/passwd
	修改root用户的口令命令：
	> sudo	passwd	root
		其他
	useradd、userdel、groupadd、groupdel等账号、组管理类命令可能引入特权用户。
	mkfs可能破坏系统文件
	kill、shutdown、init、reboot、halt、poweroff会影响系统的正常运行
…
3.5	禁止命令规避措施
	对于建议禁止配置sudo权限的命令，安全要求禁止配置在sudoers文件中。如果业务场景要求必须配置，则必须使用如下方法规避安全风险：
		脚本封装
	脚本封装就是将要执行的命令封装在脚本内，封装时要确保脚本的执行不会引发安全风险（如封装的命令可以任意执行），封装完成后再配置脚本的sudo权限即可。
	例如，以下脚本封装su命令：
	#！/bin/bash
	if  [ “$1” = “jack” ] || [ “$1” = “bob” ]
	then
			su  $1
	else
			echo ‘Permision  denied’
	fi
	以下示例通过上面的脚本封装su命令，并配置脚本的sudo权限，可以使用户tom通过该脚本执行su命令，且只能通过su切换到用户jack和用户bob下。
	新建一个脚本/home/tom/su.sh，添加以上内容并保存：
	# vi  /home/tom/su.sh 
	修改/home/tom/su.sh脚本的权限，使其可执行：
	# chmod  550  /home/tom/su.sh
	修改/home/tom/su.sh脚本的用户/组所有者为下面的用户xxx和其所在的组xxxgrp：
	# chown  xxx:xxxgrp   /home/tom/su.sh
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(xxx)  NOPASSWD:/home/tom/su.sh
	用户tom通过su.sh脚本切换到用户jack下命令：
	tom> sudo  -u  xxx  /home/tom/su.sh  jack
	(如果xxx为root则，执行完以上命令会直接切换到jack用户下；否则会提示输入jack的口令)
	用户tom试图通过su.sh脚本切换到root时提示“Permision  denied”：
	tom> sudo  -u  xxx  /hom/tom/su.sh  root
	Permision  denied
3.6	合理配置sudo执行命令的文件权限
	假设sudoers配置中存在以下配置：
	tom  ALL=( xxx)  NOPASSWD:/home/tom/bin/set.sh
	则要求tom不能修改/home/tom/bin/set.sh的文件内容，否则tom可以通过修改set.sh来提权访问其他资源。
	对于以上配置，可以采用以下方法：
	方法1： 为set.sh文件设置不可修改属性
	root # chattr +i /home/tom/bin/set.sh
	用root为set.sh文件设置不可修改属性后，即使是root也不能修改/删除set.sh文件，必须先用root移除该属性后才可。（chattr  -i）
	方法2：修改文件及上层目录的属主及权限
	root # chown  xxx  /home/tom/bin 
	root # chown  xxx  /home/tom/bin/set.sh
	root # chmod  go-w  /home/tom/bin
	root # chmod  go-w  /home/tom/bin/set.sh
	修改后确保tom不能任意修改sudo执行脚本的内容。
3.7	开启日志功能
	以root用户身份登录服务器，执行如下命令查看sudo日志文件/var/log/sudo.log：
	# cat  /var/log/sudo.log
	执行后可看到类似下图的日志记录：

	上图的一条记录释义如下：
	Jul	22	02:09:41：使用sudo的时间
	LJ：sudo使用者的用户名
	TTY=pts/3：sudo使用者的TTY值
	PWD=/：使用sudo时所在的目录
	USER=root：使用sudo切换到的用户
	COMMAND=/bin/cp /etc/shadow /fjl/：具体执行的命令
	通过以下两步即可开启日志功能：
	创建一个文件用于保存日志：
	#touch  /var/log/sudo.log 
	编辑/etc/sudoers文件，设置logfile参数：
	在#Defaults  specification下面添加：Defaults logfile=/var/log/sudo.log
3.8	合理配置权限
	配置sudo权限时根据用户的职责和权力来最小化配置Runas，谨慎使用root权限。
	当用户只需要普通用户的权限，执行普通的命令时可进行如下配置：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(%users)  NOPASSWD:Commands_List
	当用户要进行数据库管理时，可进行如下配置：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(%dba)  NOPASSWD:Commands_List
…
3.9	设置sudo文件权限
	通过设置文件权限，可以有效保护系统内的特殊文件。将特殊文件的权限设置为仅root用户可读，能够防止其他用户查看敏感信息。
	设置sudo配置文件权限命令：
	#chmod  400  /etc/sudoers
	设置sudo日志文件权限命令：
	#chmod  400  /var/log/sudo.log
3.10	排查可用sudo来执行的脚本的权限是否配置错误
3.10.1 攻击原理
	不恰当的配置脚本的sudo执行权限可能会造成设备恶意用户的越权行为。例如，下面示例中用户tom可以通过sudo切换到root账号执行test.sh命令，且test.sh的属主是tom，这样就可以通过修改该脚本，添加恶意命令：
	编辑/etc/sudoers文件，自定义如下配置：
	tom  ALL=(root)  NOPASSWD: /home/tom/bin/set.sh
	编辑/home/tom/bin/set.sh，添加以下命令：
	shutdown -h now
	在根目录/下的命令：
	> sudo /home/tom/bin/set.sh
	3.10.2 正确的配置
	对于以上配置，可以采用以下方法：
	方法1：将脚本中需要执行的命令单独配置sudo权限，不使用sudo来执行该脚本。
	方法2： 为test.sh文件设置不可修改属性
	root # chattr +i /home/tom/bin/ test.sh
	用root为set.sh文件设置不可修改属性后，即使是root也不能修改/删除set.sh文件，必须先用root移除该属性后才可。（chattr  -i）
	方法3：修改文件及上层目录的属主及权限，使tom不能任意修改sudo执行脚本的内容
	root # chown  xxx  /home/tom/bin 
	root # chown  xxx  /home/tom/bin/test.sh
	root # chmod  go-w  /home/tom/bin
	root # chmod  go-w  /home/tom/bin/ test.sh
3.11	排查sudo里面配置的脚本或目录实际不存在
如果/etc/sudoers文件中配置了不存在的脚本，那么普通用户可以创建该脚本，在该脚本中添加恶意命令，然后再用sudo去执行该脚本，从而达到越权的目的。
3.12	Sudo测试分类和测试方法分类
	1、	检查sudoers中是否包含单纯的linux命令，如chown，如有按照方法一测试
	2、	检查sudoers中是否包含带参数的linux命令，如rm /etc/passwd，mv  *  /opt/user 如有按照方法二测试
	3、	检查sudoers中是否包含单纯的自定义脚本：
	a)	检查自定义脚本中是否包含外部传参，如有，在参数被使用的每一处按照方法二测试
	b)	检查自定义脚本中是否包含公共脚本的某个函数引入（如. ./xx.sh (两点之间有空格)），如有，检查公共脚本是否为相路径，如是则有问题，如不是按照方法三测试
	c)	检查自定义脚本中是否包含调用其它自定义脚本，如有，检查脚本是否为相路径，如是则有问题，如不是对打开脚本按照分类3循环排查
	d)	检查自定义脚本中是否包含写死的外部固定目录/文件、固定参数，如有，在参数被使用的每个语句处按照方法二测试（如提前声明变量：declare BACKUP_POLICY_LOG=/opt/UPORTAL2800/common/run_log/SHELL/uportal_backup_policy.log
	或者 临时参数不用变量operate_Crontab "sed" "/auto_backup_uportal.sh/d" "/tmp/cron_temp"）
	e)	检查自定义脚本中是否包含输出数据到日志或其它文件语句（如echo * >> log,cat  、cat << EOF > $EXP_FILE  等），如有按照方法四测试
	f)	按照方法五测试
	4、	检查sudoers中是否包含带参数的自定义脚本（如./upload.sh uc_ims * *）：
	a)	检查自定义脚本携带参数是否包含*，如果是，*处参数，按照3->a)测试，固定参数处按照3->c)测试
	b)	其它直接参考3->b),3-d),3->e)测试。

	测试方法一：
	1、	所有sudoers中包含的单纯的linux命令，直接查询《sudo安全配置指导书》，定义为中高风险的命令需要删除。
	2、	若命令在《sudo安全配置指导书》无说明，建议查询命令功能范围后与安全SE一起做风险评估，风险评估参考 CVSS2中定义的完整、机密、可用性。
	测试方法二：
	1、	检查参数被引入的命令是否为《sudo安全配置指导书》定义的中高危命令，如不是，分析是否存在参数或参数指向的内容被写入文本、log等文件，如果有写动作，就查看文本和log文件是否当前用户不可写且不属主，查看文件和log所在目录是否当前用户不可写且不属主。并且观察参数或参数指向的内容是否当前用户可任意指定（参考案例五）
	2、	如果参数被中高危命令引用，需要按照《sudo安全配置指导书》中的描述做限制（通读上下文代码，参考案例一到七）。
	a)	做为chmod、chown、mv、cp、rm、tar、gzip等命令的参数时，若作为目录文件入参，检查是否为脚本外部无限制入参，若是就有可能存在问题（参考案例一、二、四），可以尝试绕过目录限制（../）；
	b)	做为chmod、chown、mv、cp、rm、tar、gzip等命令的参数时，若作为目录文件入参，检查是否为绝对路径文件入参，且文件所在目录属主root，当前用户不可写，文件属主root且当前用户不可写。（参考案例五、六）
	c)	若不是常见高危命令代码，需要通读上下文分析风险，及时总结案例补充此文档案例和测试方法。
	d)	检查防范低级的恶意命令写作，如mv /etc/shadow /tmp/user 或root：root|chpasswd，这类本来就存在问题确认被想当然写入sudo脚本的语句。
	测试方法三：
	1、	检查公共脚本的属主是否为root，检查是否当前user不可写，公共脚本的上层目录是否为root，当前用户不可写
	2、	检查引入的公共脚本的功能函数，并按照测试方法二排查。
	测试方法四：
	1、	查看echo 、printf等是否涉及把用户输入直接打印到某文件中，如有，需要检查文件的属主root且当前用户不可写，文件上层目录属主root且当前用户不可写
	2、	查看echo、printf 是否把passwd等变量打印到某文件中，如有，需要删除该语句
	3、	查看cat exp是否把passwd变量保存在exp，如有需要保证exp只被root读写且使用后及时删除
	4、	查看存有passwd变量的exp是否在被expect执行时输出到某log（>>log）文件，如有，需要检查是否有代码及时删除其中的passwd行，且如果有其它不可控变量输出到log文件，则需要检查log文件属主是否root，是否当前用户不可写，文件上层目录是否属主root且当前用户不可写。
	5、	如有其它打印密码、变量的情况请分析后整理补充案例和测试方法。
	测试方法五：
	检查自定义脚本属主是否为root，权限至多为550，自定义脚本上层目录属主是否为root、当前user不可写
	3.13	其他排查
		在/etc/sudoers配置文件中，允许sudo执行的命令如果只用于用户交互登录手动执行时，禁止设置NOPASSWD。
		如果通过sudo来赋予低权限用户执行特权命令的权限，必须限制其可以执行的命令范围，禁止允许执行所有命令的配置项，例如，配置文件/etc/sudoers中禁止存在如下配置项：ALL  ALL=(ALL) ALL、XXX ALL=(root) ALL（除非前面配置了Defaults targetpw）。
		禁止在/etc/sudoers允许sudo执行的命令列表中使用通配符‘*’，如禁止配置/sbin/*，/bin/*。
		Sudoers——指的/etc/sudoers，以及在sudoers以#include 或#includedir 包含进来的文件，如

	4	防御方法推荐 
		1、Sudo脚本、sudo产生日志建议单独规划在系统固有的root属主目录下，权限500
		2、Sudo脚本中引用的脚本、文件建议单独规划在系统固有的root属主目录下，权限500
		3、如果有需求必须引用非root目录或文件，引用时要做路径是否软连接判断、是否硬链接判断、是否存在跨目录判断，并对判断后再引用是否有风险结合指导、通读代码做充分评估
		4、如果有需要必须在sudo脚本中执行一个相对路径的脚本、或引入一个相对路径文件入参，则执行时建议以低权限用户执行，并对执行结果返回值有校验，防止任意构造返回值后形成新的提权注入点。
		5、如果有对文件、目录、入参等检查判断，那么这个判断语句与对其的判正后调用执行的语句时间差要尽量缩短，做到调用前1、2个语句内先判断，防止利用时间差攻击。
		6、Sudoers里面配置的常见高危命令参考《sudo安全配置指导1.3》进行排查整改，对指导中未提到的命令需要提交安全工程部充分评估。（如/bin/python）
		7、自定义脚本中使用的高危命令参考《sudo安全配置指导1.3》进行排查，理解命令功能用法的基础上形成对高危命令入参的判断。能用低权限用户执行的命令都用su user –c 执行
	举例：1) rm 入参不能由用户指定 2)cp 入参不能由用户任意指定 3)chown 要加-h，且对被属主文件做硬链接判断和文件路径判断（软连接推荐readlink、硬链接推荐在链接数上做判断） 4)chmod 尽量使用xx0，避免other组有任何权限 5) tar 解压环境要判断 等等
		8、自定义脚本中以exit为结尾
		9、自定义脚本中如果存在文件写操作应注意 1)避免不可控字符写（如用户入参、某脚本执行返回值、某user可控的文件中取值） 2)被写的文件所在目录或为root属主绝对路径、或有软硬链接判断和属主判断。
	5	SecureCAT工具排查说明
	选取HW_Linux_Security_Test_Cases_for_Specific_OS_Functions策略进行扫描，详细检查内容见附件，部分检查项目需要产品结合业务进一步判定。
	注：工具功能在试用阶段，如有问题请反馈联系安全工具部詹应根00255440

5.1	其他安全选项
	如果要设置其他的安全参数，可通过visudo编辑/etc/sudoers文件，在“# Defaults specification”下面添加。
		默认情况下，当用户使用sudo时是要求输入当前用户的密码，一旦/etc/sudoers文件里有不合理的配置如：ALL ALL=(ALL) ALL时，恶意用户就能通过sudo执行系统内的任何root命令。通过下面的方法设置targetpw后，用户使用sudo时就会要求输入目标用户的密码，即使有ALL ALL=(ALL) ALL这样的配置，恶意用户在没有root密码的情况下不会对系统造成威胁。
	编辑/etc/sudoers文件，在“# Defaults specification”下添加：
	Defaults	 targetpw
		设置always_set_home选项，使每次执行sudo时将当前用户的HOME环境变量设置为目标用户的HOME环境变量，相当于每次执行sudo时都指定-H选项。使用如下方式配置：
	编辑/etc/sudoers文件，在“# Defaults specification”下添加：
	Defaults	 always_set_home
		设置env_reset选项，使每次执行sudo时重置系统内的环境变量，使其只包括：HOME、LOGNAME、SHELL、PATH、TERM和USER。可以防止环境变量对程序造成影响。使用如下方式配置：
	编辑/etc/sudoers文件，在“# Defaults specification”下添加：
	Defaults	 env_reset
		其他选项
	编辑/etc/sudoers文件，在“# Defaults specification”下添加：
	#设置允许输入验证密码的次数为3次
	Defaults	passwd_tries=3
	#设置sudo令牌有效时间为1分钟
	Defaults	timestamp_timeout=1	
	#设置接收报警和错误邮件的地址为“xxx@abc.com”
	Defaults	mailto=“xxx@abc.com” 
	#设置当用户输入错误密码时向mailto用户发送邮件
	Defaults	mail_badpass	
	#设置当使用sudo的用户不在sudoers文件内有配置时向mailto用户发邮件
	Defaults	mail_no_user 
	其他选项可根据实际情况参考附录中表2进行设置。
6	附录
6.1	Sudo配置文件详解
6.1.1 配置文件的组成
用visudo命令打开sudo的配置文件（通常为/etc/sudoers）后，可以看到该文件包含以下几个部分：
# Host alias specification
# User alias specification
# Cmnd alias specification
# Defaults specification
# Runas alias specification
# User privilege specification
Alias
Alias是别名的意思，在配置sudo时可以为多个Host、User、Cmnd和Runas起一个别名，方便统一配置。Alias的定义必须以大写字母开头，后跟大写字母、数字、下划线的组合。
Host_Alias：
Host为主机，表明用户可以在哪些主机上执行后面的命令，Host可以为主机名、主机IP地址、网络/子网掩码、网络组或者为ALL，为ALL时没有主机约束。可以通过以下方式定义Host_Alias：
Host_Alias  HOSTS1 = HostName1 ，HostName2 ，HostIP1，HostIP2#定义一个Alias
Host_Alias  HOSTS2 = HostName3 : HOSTS3 = HostName4	#定义多个Alias时用“:”隔开
Host_Alias  HOSTS4 = HostName5，HOSTS2
User_Alias：
User是要授权的用户名或者组名（如果是系统组，则要在组名前面加“%”；如果是网络组，则要在组名前面加“+”），也可以为ALL，为ALL时没有用户限制即任何用户都可以通过sudo使用后面的命令。User_Alias的定义方法同Host_Alias。
Cmnd_Alias：
Cmnd为要授权的命令，命令中可以带参数，参数中如果出现“,”，“:”，“=”和“\”这些特殊字符，则必须在前面用“\”转义，指明用户可以执行哪些命令；Cmnd也可以为目录（必须以“/”结束），指明用户可以执行哪些目录里的文件(不包括子目录里的文件)，为ALL则没有限制即可以执行所有命令。命令要写绝对路径不能只写命令名（如ls命令必须写为/bin/ls），命令之间用逗号分隔。Cmnd_Alias的定义方法同Host_Alias。
Runas_Alias：
Runas为通过sudo要切换到的用户或组（用户可以是用户名或uid，uid之前要加“#”，组可以是系统组前面加“%”或者是网络组前面加“+”），为ALL时可以切换到任何用户。Runas_Alias的定义方法同Host_Alias。
说明：Host_Alias的定义最好写在“# Host alias specification”下面，其他Alias的定义也是如此。
6.1.2 配置规则
User		Host=(Runas)	[Tag:]Commands  [，[Tag:]Commands]
User：要授权的对象，可以是一个特定的用户名（如tom），可以是一个组名（系统组：%Group，网络组：+NetGroup），还可以是一个定义好的User_Alias。
Host：要授权的主机，可以是一个特定的主机或一个定义好的Host_Alias。
Runas：通过sudo要切换到的对象，可以是一个特定的用户名（如root），可以是一个组名（系统组：%Group，网络组：+NetGroup），还可以是一个定义好的Runas_Alias。
Tag：常用的Tag标签有NOPASSWD和PASSWD。设置为NOPASSWD时，当用户通过sudo执行后面的Commands时不需要进行身份验证，而设置为PASSWD时需要身份验证。
Commands：要授权的命令，可以是一些特定的命令或一个定义好的Cmnd_Alias。
说明：
1)	User、Host、Runas和Commands均可设置为ALL，为ALL时表明该项没有限制，也可以在它们的前面使用“!”进行取反操作（如!/bin/ls表示禁止通过sudo执行ls命令）；
2)	每个配置项最好写在“# User privilege specification”下面；
3)	sudo配置文件是从上到下解析的，如果前后设置不同，后面的设置将会覆盖前面的设置，例如：
	 tom	ALL=(root)	NOPASSWD:/bin/cp
	 tom	ALL=(root)	PASSWD:/bin/cp
	 上面两条配置，用户tom通过sudo执行cp命令还是会要求进行身份验证，因为后面一条配置会覆盖前面一条配置。
6.1.3 默认参数
通过默认参数的设置（使用Defaults关键字），可以改变使用sudo时的一些行为，例如：
Defaults	timestamp_timeout=0
上面这条设置将会使sudo的有效令牌时间为0，即用户每次使用sudo时都要进行身份验证。
Defaults	logfile=/var/log/sudo.log
这条配置将开启sudo的日志功能，即用户使用sudo的行为会被记录在/var/log/sudo.log文件中。
其他参数的设置可根据需要参考表2进行设置。
布尔类型的参数可在前面用“!”进行取反操作。
表2：默认参数
参数	类型	描  述	默认值	安全值
authenticate	布尔	如果设置(为on)的话，用户在用sudo执行命令之前必须通过口令(或者通过其他的方式)来验证身分。这个默认选项可以通过设置PASSWD和NOPASSWD标签来覆盖。	on	on
root_sudo	布尔	如果设置(为on)的话，root也将被允许使用sudo。将此标志设置为off来阻值用户通过使用类似于“sudo sudo /bin/sh”这样的连锁sudo命令来获得一个root权限的shell。	on	off
rootpw	布尔	如果设置(为on)的话，sudo将提示输入root的口令而不是执行sudo命令的用户的口令。	off	on
targetpw	布尔	如果设置(为on)的话，sudo将提示输入由sudo的-u选项指定的用户(默认为root)的口令而不是执行sudo的用户的口令。	off	on
mail_always	布尔	每当有用户使用sudo时就给mailto user发送一封邮件。	off	on
mail_badpass	布尔	当用户使用sudo但是却输入了错误的口令时将给mailto user发送一封邮件。	off	on
mail_no_user	布尔	如果使用sudo的用户在sudoers中没有记录的话将给mailto user发送一封邮件。	off	on
mail_no_host	布尔	如果使用sudo的用户在sudoers中有记录，但是他不被永许在正在使用的主机上使用sudo，将给mailto user发送一封邮件。	off	on
mail_no_perms	布尔	如果用户有使用sudo的权限，但是他试图用sudo使用的命令在sudoers中没有列出来，那么给mailto user发送一封邮件。	off	on
insults	布尔	如果设置(为on)的话，可以通过badpass_message参数设置用户输入错误口令时的提示信息 。	off	N/A
passwd_tries	整数	sudo向日志中写入一个登录失败记录并退出之前允许用户输入口令的次数。	3	3
timestamp_timeout	整数	sudo再次询问口令之前的时间(以分钟记)。如果想要总是询问口令的话请把此值设置为0。如果设置为负数的话，用户的时间戳永远不会过期，这可以用来允许用户分别使用sudo -v和sudo -k来建立或者删除他们自己的时间戳。	5	5
passwd_timeout	整数	sudo询问口令的超时时间(分钟记)。设置为0可以取消口令超时。
	5	1
mailsub	字符串	发送给mailto user的邮件使用的主题。转义字符%h将被扩展为机器的主机名。	*** SECURITY information for %h ***	N/A
mailerpath	字符串	用来发送报警邮件的邮件程序的路径。	sendmail的路径。
	N/A
mailto	字符串	发送报警邮件和错误邮件的目的地址。这个地址必须用双引号引起来，以免sudo解释"@"符号。	root	N/A
badpass_message	字符串	当用户输入了错误的口令时显示的信息。除非设置了insults的话，否则不可设置。
	Sorry,try again.	N/A
passprompt	字符串	询问口令时的提示。可以被sudo的-p选项或者SUDO_PROMPT环境变量所覆盖。这里提供了两个转义字符：%u将被扩展为用户的登录名，而%h将被扩展为本地主机名。
	Password:	N/A
runas_default	字符串	使用sudo但没有指定-u标志时使用的默认用户。	root	root
logfile	字符串	sudo日志的存放位置。设置一个路径来打开日志功能，取消设置将关闭日志功能。	无	/var/log/sudo.log
exempt_group	字符串	在此组中的用户将不要求口令，此选项默认没有设置。	无	不设置
其他参数…

6.2	案例

